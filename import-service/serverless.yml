service: import-service
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  environment:
    BUCKET_NAME: ${self:custom.s3.bucket}
    QueueUrl: "${cf:product-service-${self:provider.stage}.SQSQueueUrl}"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
        - arn:aws:s3:::${self:custom.s3.bucket}
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - arn:aws:s3:::${self:custom.s3.bucket}/*
    - Effect: Allow
      Action: "sqs:*"
      Resource:
        - "${cf:product-service-${self:provider.stage}.SQSQueueArn}"

custom:
  webpack:
    webpackConfig: '../webpack.config.js'
    includeModules: true
  serverless-offline:
    httpPort: 4001
  s3:
    bucket: aws-cource-be

plugins:
  - 'serverless-webpack'
  - 'serverless-offline'
  - 'serverless-dotenv-plugin'
  - 'serverless-pseudo-parameters'

functions:
  importProductsFile:
    handler: src/handlers/importProductsFile/importProductsFile.importProductsFile
    events:
      - http:
          path: import
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                name: true
          authorizer:
            name: basicAuthorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
            arn: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:authorization-service-dev-basicAuthorizer
  importFileParser:
    handler: src/handlers/importFileParser/importFileParser.importFileParser
    events:
      - s3:
          bucket: ${self:custom.s3.bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true

resources:
  # AWS CloudFormation Template
  Resources:
    AwsCource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3.bucket}
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - PUT
                - GET
                - POST
                - HEAD
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
        AccessControl: PublicRead
    AwsCourceBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        PolicyDocument:
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                - 's3:GetObject'
              Resource: arn:aws:s3:::${self:custom.s3.bucket}/*
        Bucket:
          Ref: AwsCource
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
